#!/usr/bin/env python3
# Copyright (C) 2017-2018 taylor.fish <contact@taylor.fish>
#
# This file is part of Fish MidiSlide.
#
# Fish MidiSlide is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Fish MidiSlide is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Fish MidiSlide.  If not, see <http://www.gnu.org/licenses/>.

from collections import OrderedDict
import os

SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
TTL_PATH = os.path.join(SCRIPT_DIR, "midislide.ttl")
C_PATH = os.path.join(SCRIPT_DIR, "ports.h")
INDENT = " " * 4

TTL_HEAD = """
# Copyright (C) 2018 taylor.fish <contact@taylor.fish>
#
# This file is part of Fish MidiSlide.
#
# Fish MidiSlide is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Fish MidiSlide is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Fish MidiSlide.  If not, see <http://www.gnu.org/licenses/>.

# This file was automatically generated by generate_plugin_data.py.

@prefix doap: <http://usefulinc.com/ns/doap#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix lv2: <http://lv2plug.in/ns/lv2core#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix units: <http://lv2plug.in/ns/extensions/units#> .
@prefix pprops: <http://lv2plug.in/ns/ext/port-props#> .
@prefix atom:  <http://lv2plug.in/ns/ext/atom#> .
@prefix urid:  <http://lv2plug.in/ns/ext/urid#> .
@prefix midi:  <http://lv2plug.in/ns/ext/midi#> .
@prefix time: <http://lv2plug.in/ns/ext/time#> .

<https://taylor.fish/plugins/midislide>
    a lv2:Plugin ;
    doap:name "Fish MidiSlide" ;
    doap:license <https://www.gnu.org/licenses/gpl-3.0.txt> ;
    doap:developer [
        a foaf:Person ;
        foaf:name "taylor.fish" ;
        foaf:mbox <mailto:contact@taylor.fish> ;
    ] ;
    doap:maintainer [
        a foaf:Person ;
        foaf:name "taylor.fish" ;
        foaf:mbox <mailto:contact@taylor.fish> ;
    ] ;
    lv2:optionalFeature lv2:hardRTCapable ;
    lv2:requiredFeature pprops:supportsStrictBounds ;
    lv2:requiredFeature urid:map ;
    lv2:port [
"""

C_HEAD = """
/*
 * Copyright (C) 2018 taylor.fish <contact@taylor.fish>
 *
 * This file is part of Fish MidiSlide.
 *
 * Fish MidiSlide is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Fish MidiSlide is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Fish MidiSlide.  If not, see <http://www.gnu.org/licenses/>.
 */

// This file was automatically generated by generate_plugin_data.py.

#ifndef PORTS_H
#define PORTS_H

enum {
"""

PORTS = OrderedDict([
    ("INPUT", """
a lv2:InputPort ,
  atom:AtomPort ;
atom:bufferType atom:Sequence;
atom:supports midi:MidiEvent;
atom:supports time:Position;
lv2:index {index} ;
lv2:symbol "in" ;
lv2:name "In"
"""),

    ("OUTPUT", """
a lv2:OutputPort ,
  atom:AtomPort ;
atom:bufferType atom:Sequence;
atom:supports midi:MidiEvent;
lv2:index {index} ;
lv2:symbol "out" ;
lv2:name "Out"
"""),

    ("BEAT_DIVISOR", """
a lv2:InputPort ,
  lv2:ControlPort ;
lv2:index {index} ;
lv2:symbol "beat_divisor" ;
lv2:name "Beat divisor" ;
lv2:portProperty pprops:hasStrictBounds ;
lv2:default 4 ;
lv2:minimum 0.125 ;
lv2:maximum 128;
"""),

    ("BEND_SEMITONE_DISTANCE", """
a lv2:InputPort ,
  lv2:ControlPort ;
lv2:index {index} ;
lv2:symbol "bend_semitone_distance" ;
lv2:name "Pitch bend semitone distance" ;
lv2:portProperty pprops:hasStrictBounds ;
lv2:default 12 ;
lv2:minimum 0.5 ;
lv2:maximum 64;
"""),

    ("FORCED_VELOCITY", """
a lv2:InputPort ,
  lv2:ControlPort ;
lv2:index {index} ;
lv2:symbol "forced_velocity" ;
lv2:name "Fixed velocity" ;
lv2:portProperty pprops:hasStrictBounds ;
lv2:portProperty lv2:integer ;
lv2:default 0 ;
lv2:minimum 0 ;
lv2:maximum 127;
"""),
])


class Writer:
    def __init__(self, ttl_path, c_path):
        self.index = 0
        self.ttl_file = open(ttl_path, "w")
        self.c_file = open(c_path, "w")

    def port(self, c_name, template, first=False, **kwargs):
        if not first:
            self.ttl_raw(INDENT + "] , [")

        self.ttl_raw(INDENT * 2 + template.strip().format(
            index=self.index, **kwargs,
        ).replace("\n", "\n" + INDENT * 2))

        if c_name:
            self.const("PORT_" + c_name, self.index)
        self.index += 1

    def const(self, c_name, val):
        self.c_raw(INDENT + "{} = {},".format(c_name, val))

    def ttl_raw(self, text, **kwargs):
        print(text, file=self.ttl_file, **kwargs)

    def c_raw(self, text, **kwargs):
        print(text, file=self.c_file, **kwargs)

    def close(self):
        pass

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.ttl_file.close()
        self.c_file.close()


def generate_files(writer):
    w = writer
    w.ttl_raw(TTL_HEAD.strip())
    w.c_raw(C_HEAD.strip())
    for i, (c_name, template) in enumerate(PORTS.items()):
        w.port(c_name, template, first=(i == 0))

    w.ttl_raw(INDENT + "] .")
    w.c_raw("};")
    w.c_raw("")
    w.c_raw("#endif")


def main():
    with Writer(TTL_PATH, C_PATH) as writer:
        generate_files(writer)

if __name__ == "__main__":
    main()
